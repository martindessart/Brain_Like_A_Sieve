ungroup()
T0<-sAll %>%
group_by(cond,ID) %>%
mutate(time=row_number()) %>%
mutate(second=time*0.4) %>%
mutate(min=second/60) %>%
ungroup()
T0$cat<-as.factor(T0$cat)
T0$ID<-as.factor(T0$ID)
T0$cond<-as.factor(T0$cond)
T0$pck<-as.factor(T0$pck)
T0$expe<-as.factor(T0$expe)
#T0$cond<-factor(T0$cond, levels = c("A2", "CT", "10 min"))
summary(T0)
#TDG----
TdG<-T0 %>%
group_by(cond,ID) %>%
summarise(absdY=sum(absdY,na.rm=T),
size=mean(size,na.rm=T)) %>%
mutate(amy=absdY/1000) %>% ungroup()
#png(width=700, height=600,filename = "YO.jpeg")
ggplot(TdG,aes(x=cond,y=amy,group=cond,color=cond))+
geom_boxplot(alpha=0.8)+
geom_jitter(alpha=0.8)+
stat_summary(fun = "mean", geom = "point",size=3,color="black",shape=15)+
theme_classic() +
labs(y="Absolute vertical distance AVD (m)",x="")+
theme(plot.title = element_text(hjust = 0.5))+
theme(plot.title = element_text(size=22,face = "bold"))+
theme(axis.text=element_text(size=20,color="black"),
axis.title=element_text(size=20,color="black"))+
#  scale_color_manual(values=c("#531B93","#009193","#941751"))+
#  scale_fill_manual(values=c("#531B93","#009193","#941751"))+
theme(legend.title = element_text(size=20),
legend.text = element_text(size=20))+
guides(colour=guide_legend(title="Species"))+
theme(legend.position = "none",
strip.text = element_text(size = 18))+
stat_compare_means(comparisons = list(
c("CT","P2")),
#   method.args = list(alternative = "greater"),
aes(label = ..p.signif..),
bracket.size = 1,size=5)
#dev.off()
#ETime----
Etime<-T0 %>%
group_by(cond,cat,ID) %>%
summarise(absdY=sum(absdY,na.rm=T)) %>%
mutate(amy=absdY/1000) %>% ungroup()
dae<-glm(amy~cat*cond, data=Etime)
yv <- predict(dae,type="link",se.fit=TRUE)
ydAE<-data.frame(yv$fit,yv$se.fit,Etime$cat,Etime$cond)
inv<-family(dae)$linkinv
#png(width=700, height=600,filename = "2Dist.jpeg")
ggplot(ydAE, aes(x=Etime.cat,y=inv(yv.fit)))+
geom_pointrange(aes(ymin=inv(yv.fit-1.96*yv.se.fit), ymax=inv((yv.fit+1.96*yv.se.fit)),
group=Etime.cond,color=Etime.cond),size=1)+
theme_classic() +
labs(y="Absolute vertical distance AVD (m)",x="Intertrial intervals")+
theme(plot.title = element_text(hjust = 0.5))+
theme(plot.title = element_text(size=22,face = "bold"))+
theme(axis.text=element_text(size=20,color="black"),
axis.title=element_text(size=20,color="black"))+
#  scale_color_manual(values=c("#531B93","#009193","#941751"))+
#  scale_fill_manual(values=c("#531B93","#009193","#941751"))+
theme(legend.title = element_text(size=20),
legend.text = element_text(size=20))+
guides(colour=guide_legend(title="Species"))+
theme(legend.position = "none",
strip.text = element_text(size = 18))+
stat_compare_means(comparisons = list(c("Dist","10"), c("10","Test")
),
method.args = list(alternative = "greater"),
aes(label = ..p.signif..),
bracket.size = 1,size=5)+
facet_wrap(~Etime.cond)
#dev.off()
#Speed----
TaG<-T0 %>%
mutate(sec=round(sec,digits=0)) %>%
group_by(cond,ID,sec) %>%
summarise(absdY=sum(absdY,na.rm=T))
Ta2<-TaG %>%
group_by(cond,ID) %>%
summarise(absdY=mean(absdY,na.rm=T))
#png(width=700, height=600,filename = "2Dist.jpeg")
ggplot(Ta2,aes(x=cond,y=absdY,group=cond,color=cond))+
geom_boxplot(alpha=0.8)+
geom_jitter(alpha=0.8)+
stat_summary(fun = "mean", geom = "point",color="black",size=3,shape=15)+
labs(y="Average speed (mm/sec)",x="")+
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))+
theme(plot.title = element_text(size=22,face = "bold"))+
theme(axis.text=element_text(size=20,color="black"),
axis.title=element_text(size=20,color="black"))+
#  scale_color_manual(values=c("#531B93","#009193","#941751"))+
#  scale_fill_manual(values=c("#531B93","#009193","#941751"))+
theme(legend.title = element_text(size=20),
legend.text = element_text(size=20))+
guides(colour=guide_legend(title="Species"))+
theme(legend.position = "none",
strip.text = element_text(size = 18))+
stat_compare_means(comparisons = list(
c("2 min","5 min"),
c("10 min","5 min"),
c("2 min","10 min")),
#   method.args = list(alternative = "greater"),
aes(label = ..p.signif..),
bracket.size = 1,size=5)
citation("emmeans")
citation("DHARMa")
knitr::opts_chunk$set(echo = TRUE,fig.width=15,fig.height=8)
#librairies ---
library(dplyr)
library(car)
library(ggeffects)
library(ggplot2)
library(DHARMa)
library(ggpubr)
library(lme4)
library(emmeans)
#rm(list=ls())
set.seed(666) #Fix kernell
setwd("/Users/martin/Documents/GitHub/Brain_Like_A_Sieve/1_Data/4_Grouped")
sAll<-read.table("G2.csv", sep=";",header=T)
sAll$ret<-as.character(sAll$ret)
sAll$cat<-as.factor(sAll$cat)
sAll$iti<-as.factor(sAll$iti)
sAll$ID<-as.factor(sAll$ID)
sAll$ret<-as.factor(sAll$ret)
sAll$pck<-as.factor(sAll$pck)
sAll$expe<-as.factor(sAll$expe)
summary(sAll)
c1<-"4 MIN"
c2<-"30 MIN"
c3<-"1 H"
c4<-"2 H"
c5<-"3 H"
c6<-"24 H"
levels(sAll$ret) <- c(c1,c2,c3,c4,c5,c6)
## 2) A_ Apply threshold ----
# a. Define the maximum vertical position to distinguish
# between individuals who have not reacted and those who have reacted
lowl1 = -10 #mm
upl1 = +10 #mm
# b. Define the threshold for being "too low" to dive due to
# the physical constraints of our cuvette
l1<- max(sAll$pos_y)-max(sAll$pos_y)/8
# c. Create an interating "number" for each row per trial / ID / group
rawAe<-sAll %>% group_by(ret,iti,ID,cat) %>% mutate(numbering = row_number()) %>% ungroup()
# d. Create threshold: take "1" if individual is below the  threshold, "0" else
scasAe<-rawAe %>% group_by(ret,iti,ID,cat) %>%
mutate(threshold = case_when(numbering==min(numbering) & pos_y>l1 ~ 1,TRUE~0)) %>% ungroup()
# e. Count thresholds and sum into "rep" variable
sfilterAe<-scasAe %>% group_by(ret,iti,ID,cat) %>%
summarise(rep=sum(threshold,na.rm=T),
dY=sum(-dY,na.rm = T),
pos_y=mean(pos_y,na.rm=T)) %>%
filter(rep==0) %>% ungroup()
# f. Split positions according to the limit previously assessed
sposAe<-sfilterAe %>%
mutate(slope=case_when(dY < lowl1 ~ "down",
dY>upl1 ~ "up",
dY >= lowl1 & dY <= upl1 ~ "flat"))
# g. Extract and bind data
s5<-sposAe %>% filter(slope=="up") %>% mutate(rep=1)
s5b<-sposAe %>% filter(slope=="flat") %>% mutate(rep=0)
stotAe<-bind_rows(s5,s5b)
rm(s5,s5b,sfilterAe,scasAe,sposAe,rawAe) #remove useless df
# h. Compare data between full df and df with rules
srAe<-stotAe %>%
group_by(ret,iti,cat) %>%
summarise(rep=100*mean(rep,na.rm=TRUE))
st1<-stotAe %>% filter(cat==11) %>% mutate(cat="Test")
st2<-stotAe %>% filter(cat!=11)
st<-bind_rows(st1,st2)
View(stotAe)
rm(list=ls())
set.seed(666) #Fix kernell
## 1) Open files and add metadata ----
setwd("/Users/martin/Documents/GitHub/Brain_Like_A_Sieve/1_Data/3_Classified")
s1<-read.table("B1_DC.csv", sep="",header=T) %>% mutate(ret=1) %>% mutate(ct=4) %>% mutate(pck=1) %>% mutate(expe=1)
s2<-read.table("B2_DC.csv", sep="",header=T) %>% mutate(ret=2) %>% mutate(ct=4) %>% mutate(pck=1) %>% mutate(expe=2)
s3<-read.table("B3_DC.csv", sep="",header=T) %>% mutate(ret=2) %>% mutate(ct=4) %>% mutate(pck=1) %>% mutate(expe=3)
s4<-read.table("B4_DC.csv", sep="",header=T) %>% mutate(ret=1) %>% mutate(ct=4) %>% mutate(pck=1) %>% mutate(expe=4)
s5<-read.table("B5_DC.csv", sep="",header=T) %>% mutate(ret=3) %>% mutate(ct=4) %>% mutate(pck=1) %>% mutate(expe=5)
s6<-read.table("B6_DC.csv", sep="",header=T) %>% mutate(ret=1) %>% mutate(ct=4) %>% mutate(pck=1) %>% mutate(expe=6)
s7<-read.table("B7_DC.csv", sep="",header=T) %>% mutate(ret=2) %>% mutate(ct=4) %>% mutate(pck=1) %>% mutate(expe=7)
s8<-read.table("B8_DC.csv", sep="",header=T) %>% mutate(ret=3) %>% mutate(ct=4) %>% mutate(pck=1) %>% mutate(expe=8)
s9<-read.table("B9_DC.csv", sep="",header=T) %>% mutate(ret=4) %>% mutate(ct=4) %>% mutate(pck=2) %>% mutate(expe=9)
s10<-read.table("B10_DC.csv", sep="",header=T) %>% mutate(ret=3) %>% mutate(ct=4) %>% mutate(pck=2) %>% mutate(expe=10)
s11<-read.table("B11_DC.csv", sep="",header=T) %>% mutate(ret=4) %>% mutate(ct=4) %>% mutate(pck=2) %>% mutate(expe=11)
s12<-read.table("B12_DC.csv", sep="",header=T) %>% mutate(ret=4) %>% mutate(ct=4) %>% mutate(pck=2) %>% mutate(expe=12)
s13<-read.table("B13_DC.csv", sep="",header=T) %>% mutate(ret=5) %>% mutate(ct=4) %>% mutate(pck=2) %>% mutate(expe=13)
s14<-read.table("B14_DC.csv", sep="",header=T) %>% mutate(ret=5) %>% mutate(ct=4) %>% mutate(pck=2) %>% mutate(expe=14)
s15<-read.table("B15_DC.csv", sep="",header=T) %>% mutate(ret=5) %>% mutate(ct=4) %>% mutate(pck=3) %>% mutate(expe=15)
s16<-read.table("B16_DC.csv", sep="",header=T) %>% mutate(ret=6) %>% mutate(ct=1) %>% mutate(pck=1) %>% mutate(expe=16)
rm(list=ls())
## 1) Open file ----
setwd("/Users/martin/Documents/GitHub/Brain_Like_A_Sieve/1_Data/2_Verified")
filename="B2"
trial_nb <- 11 #number of trials -> 11 =10 trials during training + 1 trial during test
raw<-read.table(file=paste(filename,"_B.csv",sep=""), sep="",header=T)
raw %>% count(ID)
frame_max<-max(raw$frame) #max frames
## 2) Find stimulation response ranges ----
#By looking at the video, enter the second from which the first trial is applied
beg_1trial <- 44 #sec
end_1trial <- beg_1trial+3 #sec
adjust <- -20 #frames to adjust precisely the location of the 1st trial
Find_stimuli_ranges <- function(beg_1trial,end_1trial) {
s1d<-(beg_1trial)*25 #Convert in frames
s1f<-((end_1trial)*25)-1 #Convert in frames
dist0 <- vector("numeric", trial_nb)
dist1 <- vector("numeric", trial_nb)
step<-1
counter<-vector("numeric", trial_nb)
for (i in 1:trial_nb) { #For each trial, calculate the frame number associated
dist0[i]<-(s1d+(step*25)-adjust)
dist1[i]<-(s1f+(step*25)-adjust)
step<-step+120
counter[i]<-i
}
df <- data.frame(counter,dist0,dist1) #extract ranges
colnames(df) <- c("Trial","frameD","frameF")
return(df)
}
Sti_range<-Find_stimuli_ranges(beg_1trial,end_1trial)
## 3) Display trial responses ----
Display_response <-function(ranges,nb_Sti) {
deb<-ranges[nb_Sti,2] #Find good ranges from the df
fin<-ranges[nb_Sti,3] #Find good ranges from the df
sti<-raw %>%
filter(frame>deb-500&frame<fin+500) #Extract data
ggplot(sti)+ #Display data
geom_line(aes(x=frame,y=-pos_y,colour=as.factor(ID)))+
#geom_smooth(aes(x=frame,y=-posf),method="gam",color="#41A191")+
theme_light()+
geom_rect(data=ranges,aes(xmin=deb, xmax=fin,
ymin=(-400), ymax=(0)), fill='#0677d704',color=NA)
}
Display_response(Sti_range,1) # input = Df + trial number to plot
Display_response(Sti_range,1) # input = Df + trial number to plot
Display_response(Sti_range,5) # Half way
Display_response(Sti_range,10) # last trial of training
Display_response(Sti_range,11) # test phase
#For Test phase, manually adjust ranges:
Sti_range<-Sti_range %>%
filter(Trial!=11) %>%
add_row(Trial=11,frameD=93235,frameF=frameD+74) %>%
arrange(Trial)
Display_response(Sti_range,11) # test phase
rm(list=ls())
## 1) Open file ----
setwd("/Users/martin/Documents/GitHub/Brain_Like_A_Sieve/1_Data/2_Verified")
filename="B7"
trial_nb <- 11 #number of trials -> 11 =10 trials during training + 1 trial during test
raw<-read.table(file=paste(filename,"_B.csv",sep=""), sep="",header=T)
raw %>% count(ID)
frame_max<-max(raw$frame) #max frames
## 2) Find stimulation response ranges ----
#By looking at the video, enter the second from which the first trial is applied
beg_1trial <- 35 #sec
end_1trial <- beg_1trial+3 #sec
adjust <- 10 #frames to adjust precisely the location of the 1st trial
Find_stimuli_ranges <- function(beg_1trial,end_1trial) {
s1d<-(beg_1trial)*25 #Convert in frames
s1f<-((end_1trial)*25)-1 #Convert in frames
dist0 <- vector("numeric", trial_nb)
dist1 <- vector("numeric", trial_nb)
step<-1
counter<-vector("numeric", trial_nb)
for (i in 1:trial_nb) { #For each trial, calculate the frame number associated
dist0[i]<-(s1d+(step*25)-adjust)
dist1[i]<-(s1f+(step*25)-adjust)
step<-step+120
counter[i]<-i
}
df <- data.frame(counter,dist0,dist1) #extract ranges
colnames(df) <- c("Trial","frameD","frameF")
return(df)
}
Sti_range<-Find_stimuli_ranges(beg_1trial,end_1trial)
## 3) Display trial responses ----
Display_response <-function(ranges,nb_Sti) {
deb<-ranges[nb_Sti,2] #Find good ranges from the df
fin<-ranges[nb_Sti,3] #Find good ranges from the df
sti<-raw %>%
filter(frame>deb-500&frame<fin+500) #Extract data
ggplot(sti)+ #Display data
geom_line(aes(x=frame,y=-pos_y,colour=as.factor(ID)))+
#geom_smooth(aes(x=frame,y=-posf),method="gam",color="#41A191")+
theme_light()+
geom_rect(data=ranges,aes(xmin=deb, xmax=fin,
ymin=(-400), ymax=(0)), fill='#0677d704',color=NA)
}
Display_response(Sti_range,1) # input = Df + trial number to plot
Display_response(Sti_range,5) # Half way
Display_response(Sti_range,10) # last trial of training
Display_response(Sti_range,11) # test phase
#For Test phase, manually adjust ranges:
Sti_range<-Sti_range %>%
filter(Trial!=11) %>%
add_row(Trial=11,frameD=73060,frameF=frameD+74) %>%
arrange(Trial)
Display_response(Sti_range,11) # test phase
rm(list=ls())
## 1) Open file ----
setwd("/Users/martin/Documents/GitHub/Brain_Like_A_Sieve/1_Data/2_Verified")
filename="B3"
trial_nb <- 11 #number of trials -> 11 =10 trials during training + 1 trial during test
raw<-read.table(file=paste(filename,"_B.csv",sep=""), sep="",header=T)
raw %>% count(ID)
frame_max<-max(raw$frame) #max frames
## 2) Find stimulation response ranges ----
#By looking at the video, enter the second from which the first trial is applied
beg_1trial <- 37 #sec
end_1trial <- beg_1trial+3 #sec
adjust <- -5 #frames to adjust precisely the location of the 1st trial
Find_stimuli_ranges <- function(beg_1trial,end_1trial) {
s1d<-(beg_1trial)*25 #Convert in frames
s1f<-((end_1trial)*25)-1 #Convert in frames
dist0 <- vector("numeric", trial_nb)
dist1 <- vector("numeric", trial_nb)
step<-1
counter<-vector("numeric", trial_nb)
for (i in 1:trial_nb) { #For each trial, calculate the frame number associated
dist0[i]<-(s1d+(step*25)-adjust)
dist1[i]<-(s1f+(step*25)-adjust)
step<-step+120
counter[i]<-i
}
df <- data.frame(counter,dist0,dist1) #extract ranges
colnames(df) <- c("Trial","frameD","frameF")
return(df)
}
Sti_range<-Find_stimuli_ranges(beg_1trial,end_1trial)
## 3) Display trial responses ----
Display_response <-function(ranges,nb_Sti) {
deb<-ranges[nb_Sti,2] #Find good ranges from the df
fin<-ranges[nb_Sti,3] #Find good ranges from the df
sti<-raw %>%
filter(frame>deb-500&frame<fin+500) #Extract data
ggplot(sti)+ #Display data
geom_line(aes(x=frame,y=-pos_y,colour=as.factor(ID)))+
#geom_smooth(aes(x=frame,y=-posf),method="gam",color="#41A191")+
theme_light()+
geom_rect(data=ranges,aes(xmin=deb, xmax=fin,
ymin=(-400), ymax=(0)), fill='#0677d704',color=NA)
}
Display_response(Sti_range,1) # input = Df + trial number to plot
Display_response(Sti_range,5) # Half way
Display_response(Sti_range,1) # input = Df + trial number to plot
Display_response(Sti_range,10) # last trial of training
#For Test phase, manually adjust ranges:
Sti_range<-Sti_range %>%
filter(Trial!=11) %>%
add_row(Trial=11,frameD=73170,frameF=frameD+74) %>%
arrange(Trial)
Display_response(Sti_range,11) # test phase
rm(list=ls())
## 1) Open file ----
setwd("/Users/martin/Documents/GitHub/Brain_Like_A_Sieve/1_Data/2_Verified")
filename="B2"
trial_nb <- 11 #number of trials -> 11 =10 trials during training + 1 trial during test
raw<-read.table(file=paste(filename,"_B.csv",sep=""), sep="",header=T)
raw %>% count(ID)
frame_max<-max(raw$frame) #max frames
## 2) Find stimulation response ranges ----
#By looking at the video, enter the second from which the first trial is applied
beg_1trial <- 41 #sec
end_1trial <- beg_1trial+3 #sec
adjust <- -20 #frames to adjust precisely the location of the 1st trial
Find_stimuli_ranges <- function(beg_1trial,end_1trial) {
s1d<-(beg_1trial)*25 #Convert in frames
s1f<-((end_1trial)*25)-1 #Convert in frames
dist0 <- vector("numeric", trial_nb)
dist1 <- vector("numeric", trial_nb)
step<-1
counter<-vector("numeric", trial_nb)
for (i in 1:trial_nb) { #For each trial, calculate the frame number associated
dist0[i]<-(s1d+(step*25)-adjust)
dist1[i]<-(s1f+(step*25)-adjust)
step<-step+120
counter[i]<-i
}
df <- data.frame(counter,dist0,dist1) #extract ranges
colnames(df) <- c("Trial","frameD","frameF")
return(df)
}
Sti_range<-Find_stimuli_ranges(beg_1trial,end_1trial)
## 3) Display trial responses ----
Display_response <-function(ranges,nb_Sti) {
deb<-ranges[nb_Sti,2] #Find good ranges from the df
fin<-ranges[nb_Sti,3] #Find good ranges from the df
sti<-raw %>%
filter(frame>deb-500&frame<fin+500) #Extract data
ggplot(sti)+ #Display data
geom_line(aes(x=frame,y=-pos_y,colour=as.factor(ID)))+
#geom_smooth(aes(x=frame,y=-posf),method="gam",color="#41A191")+
theme_light()+
geom_rect(data=ranges,aes(xmin=deb, xmax=fin,
ymin=(-400), ymax=(0)), fill='#0677d704',color=NA)
}
Display_response(Sti_range,1) # input = Df + trial number to plot
Display_response(Sti_range,5) # Half way
Display_response(Sti_range,10) # last trial of training
#For Test phase, manually adjust ranges:
Sti_range<-Sti_range %>%
filter(Trial!=11) %>%
add_row(Trial=11,frameD=93235,frameF=frameD+74) %>%
arrange(Trial)
Display_response(Sti_range,11) # test phase
## 4) Classify data ----
Sti_Data<- function(rg) {
df_tot = data.frame()
for (i in 1:trial_nb) {
nam<-paste("st",i,sep="")
interval<-
nam1<-raw %>%
filter(frame>=rg[i,2] & frame< rg[i,3]) %>%
mutate(cat=i) %>%
mutate(gp="Sti") #Add variable that separate Sti and Iti
df_tot<-rbind(df_tot,nam1)
}
return(df_tot)
}
Df_Sti<-Sti_Data(Sti_range)
Interval_Data<- function(rg) {
df_tot = data.frame()
for (i in 1:(trial_nb-3)) {
nam1<-raw %>%
filter(frame>rg[i,3] & frame<rg[(i+1),2]) %>%
mutate(cat=i) %>%
mutate(gp="ITI")
df_tot<-rbind(df_tot,nam1)
}
return(df_tot)
}
Df_Iti<-Interval_Data(Sti_range)
### Check and combine ----
Df_Sti %>% count(cat)
Df_Iti %>% count(cat)
Df_Tot<-bind_rows(Df_Sti,Df_Iti)
setwd("/Users/martin/Documents/GitHub/Brain_Like_A_Sieve/1_Data/3_Classified")
write.table(Df_Tot, file=paste(filename, "_DC.csv", sep=""))
source("~/Documents/GitHub/Brain_Like_A_Sieve/2_Analysis/3)Group_data/Group.R", echo=TRUE)
#librairies ---
library(dplyr)
library(car)
library(ggeffects)
library(ggplot2)
library(DHARMa)
library(ggpubr)
library(lme4)
library(emmeans)
#rm(list=ls())
set.seed(666) #Fix kernell
setwd("/Users/martin/Documents/GitHub/Brain_Like_A_Sieve/1_Data/4_Grouped")
sAll<-read.table("G2.csv", sep=";",header=T)
sAll$ret<-as.character(sAll$ret)
sAll$cat<-as.factor(sAll$cat)
sAll$iti<-as.factor(sAll$iti)
sAll$ID<-as.factor(sAll$ID)
sAll$ret<-as.factor(sAll$ret)
sAll$pck<-as.factor(sAll$pck)
sAll$expe<-as.factor(sAll$expe)
summary(sAll)
c1<-"4 MIN"
c2<-"30 MIN"
c3<-"1 H"
c4<-"2 H"
c5<-"3 H"
c6<-"24 H"
levels(sAll$ret) <- c(c1,c2,c3,c4,c5,c6)
## 2) A_ Apply threshold ----
# a. Define the maximum vertical position to distinguish
# between individuals who have not reacted and those who have reacted
lowl1 = -10 #mm
upl1 = +10 #mm
# b. Define the threshold for being "too low" to dive due to
# the physical constraints of our cuvette
l1<- max(sAll$pos_y)-max(sAll$pos_y)/8
# c. Create an interating "number" for each row per trial / ID / group
rawAe<-sAll %>% group_by(ret,iti,ID,cat) %>% mutate(numbering = row_number()) %>% ungroup()
# d. Create threshold: take "1" if individual is below the  threshold, "0" else
scasAe<-rawAe %>% group_by(ret,iti,ID,cat) %>%
mutate(threshold = case_when(numbering==min(numbering) & pos_y>l1 ~ 1,TRUE~0)) %>% ungroup()
# e. Count thresholds and sum into "rep" variable
sfilterAe<-scasAe %>% group_by(ret,iti,ID,cat) %>%
summarise(rep=sum(threshold,na.rm=T),
dY=sum(-dY,na.rm = T),
pos_y=mean(pos_y,na.rm=T)) %>%
filter(rep==0) %>% ungroup()
# f. Split positions according to the limit previously assessed
sposAe<-sfilterAe %>%
mutate(slope=case_when(dY < lowl1 ~ "down",
dY>upl1 ~ "up",
dY >= lowl1 & dY <= upl1 ~ "flat"))
# g. Extract and bind data
s5<-sposAe %>% filter(slope=="up") %>% mutate(rep=1)
s5b<-sposAe %>% filter(slope=="flat") %>% mutate(rep=0)
stotAe<-bind_rows(s5,s5b)
rm(s5,s5b,sfilterAe,scasAe,sposAe,rawAe) #remove useless df
# h. Compare data between full df and df with rules
srAe<-stotAe %>%
group_by(ret,iti,cat) %>%
summarise(rep=100*mean(rep,na.rm=TRUE))
st1<-stotAe %>% filter(cat==11) %>% mutate(cat="Test")
st2<-stotAe %>% filter(cat!=11)
st<-bind_rows(st1,st2)
